service:
  name: demo1

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
  iamRoleStatements:
    # - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource:
        - ${self:custom.AuctionsTable.arn}


resources:
  Resources:
    AuctionsTable: # ${file(resources/AuctionsTable.yml):AuctionsTable}
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: AuctionsTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1    

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions   
  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id} 
  deleteAuction:
    handler: src/handlers/deleteAuction.handler
    events:
      - http:
          method: DELETE
          path: /auction/{id}  
  updateAuction:
    handler: src/handlers/updateAuction.handler
    events:
      - http:
          method: PUT
          path: /auction/{id}                          

custom:
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      
  AuctionsTable:
    name: !Ref AuctionsTable
    arn:  !GetAtt AuctionsTable.Arn
  bundle:
    linting: false
